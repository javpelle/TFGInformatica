package model;

import java.util.ArrayList;

import model.mutant.Mutant;
import model.mutantoperator.MutantOperator;
import model.test.Test;
import model.testresult.TestResult;

/**
 * An observer for UI. Will be notified when model update his state
 */
public interface Observer {

	/**
	 * Notifies that something went wrong.
	 * 
	 * @param msg An error message.
	 */
	public void onError(String msg);

	/**
	 * Notifies mutant operator list of language.
	 * 
	 * @param qiskit
	 * @param qiskitOperators Mutant operator list
	 */
	public void updateMutantOperators(MutantOperator[] mutantOperatorList, String example);

	/**
	 * Updates the files in the new path
	 * 
	 * @param files Files from the new path.
	 */
	public void updatePath(ArrayList<String> files);

	/**
	 * Updates mutants generated by the program.
	 * 
	 * @param mutantList List of new mutants generated.
	 */
	public void updateMutants(ArrayList<Mutant> mutantList);

	/**
	 * Updates the methods contained in a file.
	 * 
	 * @param fileMethods Methods declared in a file.
	 * @param mutants     List of mutants who where generated from the file.
	 * @param file        Name of the file from where we get the name of the
	 *                    methods.
	 */
	public void updateFileMethods(ArrayList<String> fileMethods, ArrayList<Mutant> mutants);

	/**
	 * Sets the type of test available for the program.
	 * 
	 * @param tests List which containts the different type of test.
	 */
	public void setTests(Test[] tests);

	/**
	 * Notification from the generation of mutants.
	 * 
	 * @param msg Message to be notified.
	 */
	public void notifyMutantsGenerator(String msg);

	/**
	 * Notification from the execution of tests.
	 * 
	 * @param msg Message to be notified.
	 */
	public void notifyTestCaseRunner(String msg);

	/**
	 * Notification from the results obtained from execution.
	 * 
	 * @param results Results gathered during execution of tests.
	 */
	public void notifyResults(ArrayList<ArrayList<TestResult>> results);

	/**
	 * Updates which mutants were killed after execution.
	 * 
	 * @param kills Indicates which mutants die.
	 */
	public void updateKills(ArrayList<ArrayList<Boolean>> kills);

}
